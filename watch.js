import fs from "fs";
import { resolve, parse } from "path";
const cwd = process.cwd();

let ignoreWatch = false;

function fixName(p = "") {
  p = p.replace(/\./g, "");
  p = p.replace(/-/g, "_");
  p = p.replace(/\//g, "_");
  return p;
}

function makeFetchCode(exportName, baseUrl) {
  return `/* eslint-disable */
// Code generated once, CAN EDIT IT.

import { createZeroApi } from 'svelte-zero-api';
import type __types from './types';

export const ${exportName} = createZeroApi<typeof __types>({
  baseUrl: "${baseUrl}",
  // get or post use memo cache time(ms)
  cacheTime: 0,
  // if have error, you can do someting
  onError: async (err) => {
    console.error('[svelte-zero-api]', err);
  }
});`;
}

function makeApiCode(importCode, dirText) {
  return `/* eslint-disable */
// Code generated by svelte-zero-api, DO NOT EDIT.

${importCode}
export default ${dirText}
`;
}

function updateAPI(realPath = "", dirName) {
  const fixRealPath = (inPath = "") => {
    inPath = inPath.replace(/\.(ts|js)/, "");
    return inPath.replace(realPath, "..");
  };
  let dir = {};
  let importCode = "";
  const loadDir = (thePath, obj) => {
    const files = fs.readdirSync(thePath);
    files.forEach((file) => {
      if (file === dirName) {
        return;
      }
      const p = resolve(thePath, file);
      const stat = fs.statSync(p);
      const key = "'" + file.replace(/\.(ts|js)/, "") + "'";
      if (stat.isDirectory()) {
        if (!obj[key]) {
          obj[key] = {};
        }
        loadDir(p, obj[key]);
      } else if (/\.(ts|js)$/.test(file) && !/\.d\.ts$/.test(file)) {
        const importName = fixRealPath(p);
        const name = fixName(importName);
        importCode += `import * as ${name} from "${importName}";\n`;
        obj[key] = name;
      }
    });
  };
  loadDir(realPath, dir);
  const dirText = JSON.stringify(dir).replace(/\"/g, "");

  ignoreWatch = true;
  fs.writeFile(
    resolve(realPath, dirName + "/types.d.ts"),
    makeApiCode(importCode, dirText),
    (err) => {
      if (err) {
        console.error(err);
      }
      setTimeout(() => {
        ignoreWatch = false;
      });
    }
  );
}

export default function ({ watchPath, dirName, exportName }) {
  dirName = dirName || "zero-api";
  exportName = exportName || "api";
  const realPath = resolve(cwd, watchPath);

  if (!fs.existsSync(resolve(realPath, dirName))) {
    fs.mkdirSync(resolve(realPath, dirName));
  }

  const indexPath = resolve(realPath, dirName + "/index.ts");

  if (!fs.existsSync(indexPath)) {
    fs.writeFile(
      resolve(realPath, dirName + "/index.ts"),
      makeFetchCode(exportName, "/" + parse(realPath).base),
      (err) => {
        if (err) {
          console.error(err);
        }
      }
    );
  }

  updateAPI(realPath, dirName);
  fs.watch(realPath, (event, file) => {
    if (!ignoreWatch) {
      updateAPI(realPath, dirName);
    }
  });
}
